SEARCHER  
    1) ALL USER CAN SEARCH 
    2) With Filter - (COST, RATING, PayOnDelivery) -> Extendable
CART:
    1) ONLY LOGGED USER CAN ADD TO CART
ORDER:
    1) ONLY LOGGED USER CAN ADD TO ORDER
TRACKING ORDER STATUS:
    1) USER CAN VIEW ORDER STATUS
CANCEL ORDER:
    1) ALLOWED TO CANCEL ORDER AT PARTICULAR STAGE
NOTIFICATION:
    1) Multiple Notification
THINK ABOUT ALL THE USING PERSPECTIVE

DB Design:
    1)  site_user
            id (INT, PK)
            email_address (VARCHAR(350))
            phone_number (VARCHAR(20))
            password (VARCHAR(500))

    2)  address

            id (INT, PK)
            unit_number (VARCHAR(20))
            street_number (VARCHAR(20))
            address_line1 (VARCHAR(500))
            address_line2 (VARCHAR(500))
            city (VARCHAR(200))
            region (VARCHAR(200))
            postal_code (VARCHAR(20))
            country_id (INT, FK to country)

    3) user_address

            user_id (INT, FK to site_user)
            address_id (INT, FK to address)
            is_default (INT) 

    4)  product

            id (INT, PK)
            category_id (INT, FK to product_category)
            name (VARCHAR(500))
            description (VARCHAR(4000))
            base_price DECIMAL(10,2), -- Base price before variant adjustments
            product_image (VARCHAR(1000))
            is_active BOOLEAN DEFAULT true,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP

    
    5)  product_category

            id (INT, PK)
            parent_category_id (INT, FK to product_category)
            category_name (VARCHAR(200))
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP

    6)  product_variant

            id INT PRIMARY KEY,
            product_id INT REFERENCES product(id),
            sku VARCHAR(50) UNIQUE NOT NULL,
            price DECIMAL(10,2) NOT NULL,
            compare_at_price DECIMAL(10,2), -- Original price for showing discounts
            cost_price DECIMAL(10,2), -- Cost for profit calculations
            weight DECIMAL(8,2),
            weight_unit VARCHAR(10),
            barcode VARCHAR(50),
            product_image VARCHAR(1000),
            is_active BOOLEAN DEFAULT true,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    
    #-- Attributes (e.g., Color, Size, Model, etc.)
    7)  product_attribute

            id (INT, PK)
            name (VARCHAR(50))
            display_name VARCHAR(100), -- For UI display
            description VARCHAR(500),
            input_type VARCHAR(50), -- dropdown, radio, color-picker, etc.
            is_active BOOLEAN DEFAULT true,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP

    -- Attribute Values (e.g., Red, Blue, S, M, L, etc.)
    8)  product_attribute_value

            id (INT, PK)
            attribute_id (INT, FK to product_attribute)
            value (VARCHAR(50))
            display_value VARCHAR(100), -- For UI display
            sort_order INT DEFAULT 0,
            metadata JSONB, -- Additional data like color codes, measurements, etc.
            is_active BOOLEAN DEFAULT true,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP

    *)  product_attribute_configuration

           id INT PRIMARY KEY,
           product_id INT REFERENCES product(id),
           attribute_id INT REFERENCES product_attribute(id),
           display_order INT NOT NULL,
           is_required BOOLEAN DEFAULT true,
           is_variant_defining BOOLEAN DEFAULT true, -- Whether this creates a unique variant
           affects_pricing BOOLEAN DEFAULT false,
           price_adjustment DECIMAL(10,2) DEFAULT 0, -- Price adjustment if any
           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
           UNIQUE (product_id, attribute_id)

    9)  product_variant_attribute

            id INT PRIMARY KEY,
            variant_id INT REFERENCES product_variant(id),
            attribute_value_id INT REFERENCES product_attribute_value(id),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE (variant_id, attribute_value_id)
    
    10) shopping_cart

             id INT PRIMARY KEY,
             user_id INT REFERENCES site_user(id),
             created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
             updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP

    11) shopping_cart_item (modified)

            id INT PRIMARY KEY,
            cart_id INT REFERENCES shopping_cart(id),
            variant_id INT REFERENCES product_variant(id),
            quantity INT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE (cart_id, variant_id)
    
    12) shop_order (modified)

        id INT PRIMARY KEY,
        user_id INT REFERENCES site_user(id),
        order_number VARCHAR(50) UNIQUE,
        order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status_id INT REFERENCES order_status(id),
        payment_method_id INT REFERENCES user_payment_method(id),
        shipping_address_id INT REFERENCES address(id),
        billing_address_id INT REFERENCES address(id),
        shipping_method_id INT REFERENCES shipping_method(id),
        subtotal DECIMAL(10,2),
        shipping_cost DECIMAL(10,2),
        tax_amount DECIMAL(10,2),
        discount_amount DECIMAL(10,2),
        total_amount DECIMAL(10,2),
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP


    13) order_line (modified)

        id INT PRIMARY KEY,
        order_id INT REFERENCES shop_order(id),
        variant_id INT REFERENCES product_variant(id),
        quantity INT NOT NULL,
        unit_price DECIMAL(10,2) NOT NULL,
        subtotal DECIMAL(10,2) NOT NULL,
        discount_amount DECIMAL(10,2) DEFAULT 0,
        tax_amount DECIMAL(10,2) DEFAULT 0,
        total_amount DECIMAL(10,2) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP

    14) user_payment_method

            id (INT, PK)
            user_id (INT, FK to site_user)
            payment_type_id (INT, FK to payment_type)
            provider (VARCHAR(100))
            account_number (VARCHAR(50))
            expiry_date (DATE)
            is_default (INT) 

    15) warehouse
        id INT PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        code VARCHAR(20) UNIQUE,
        address_id INT REFERENCES address(id),
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP

    16) Inventory
        id INT PRIMARY KEY,
        variant_id INT REFERENCES product_variant(id),
        warehouse_id INT REFERENCES warehouse(id),
        quantity INT NOT NULL DEFAULT 0,
        reserved_quantity INT NOT NULL DEFAULT 0, -- For items in shopping carts
        reorder_point INT,
        reorder_quantity INT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE (variant_id, warehouse_id)

    17) inventory_movement
        id INT PRIMARY KEY,
        variant_id INT REFERENCES product_variant(id),
        warehouse_id INT REFERENCES warehouse(id),
        movement_type VARCHAR(50), -- IN, OUT, TRANSFER, ADJUSTMENT
        quantity INT NOT NULL,
        reference_type VARCHAR(50), -- ORDER, RETURN, ADJUSTMENT, etc.
        reference_id INT, -- ID of the related entity
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP

SEARCHER: (Assumption be fetching all the products and doing inmemory filter)
    Request(productName: str, filter_detaisl: FilterDetails ) -> Response([Product])
    
    FilterDetails - price_filter,rating_filter, payOnDelFilter

    Think About Chain Of Responsibility 

    Chain Of Responsibility - Each class have thier own function + point to the next function

PERMISSION FACTORY:
    Each Functionality can have different kind of permission so to keep it in central place and also for each function call we can have seperate DB query as well

ADD TO CART:
    Request(user: User, cart_id: int) -> Response(None)
    Cart Manager Take Care of Cart Logic

UPDATE ORDER STATUS:
    Request(order_id, new_status, details) -> Response(order)